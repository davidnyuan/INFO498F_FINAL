<<<<<<< 210ed7b37dfd5d59b5951eff4ba79af0a94f8765
<<<<<<< 879caeb142c386e606a77827ffd34b5f8035c90a
data = [trace1, trace2]
layout = go.Layout(
barmode='stack'
=======
showland = TRUE,
landcolor = toRGB("gray95"),
subunitcolor = toRGB("gray85"),
countrycolor = toRGB("gray85"),
countrywidth = 0.5,
subunitwidth = 0.5
>>>>>>> rdata rhist
)
fig = go.Figure(data=data, layout=layout)
plot_url = py.plot(fig, filename='stacked-bar')
chart_summary <- group_by(`Class Standing`) %>%
summarise(
windows = length(which(`Operating System`==x))
)
chart_summary <- chart_data %>% group_by(`Class Standing`) %>%
summarise(
windows = length(which(`Operating System`==x))
)
chart_summary <- chart_data %>% group_by(`Class Standing`) %>%
summarise(
windows = length(which(`Operating System`=="Windows"))
)
View(chart_summary)
=======
>>>>>>> added about_us.md
chart_summary <- chart_data %>% group_by(`Class Standing`) %>%
summarise(
windows = length(which(`Operating System`=="Windows")),
mac = length(which(`Operating System`=="Mac")),
linux = length(which(`Operating System`=="Linux")),
other = length(which(`Operating System`=="other"))
)
chart_summary <- chart_data %>% group_by(`Class Standing`) %>%
summarise(
windows = length(which(`Operating System`=="Windows")),
mac = length(which(`Operating System`=="Mac")),
linux = length(which(`Operating System`=="Linux")),
other = length(which(`Operating System`=="Other"))
)
chart_summary <- chart_data %>% group_by(`Class Standing`) %>%
summarise(
windows = length(which(`Operating System`=="Windows")),
mac = length(which(`Operating System`=="Mac")),
linux = length(which(`Operating System`=="Linux")),
other = length(which(`Operating System`=="Other")),
VCF_never = length(which(`Version Control Familiarity`=="Never used it")),
VCF_few = length(which(`Version Control Familiarity`=="Have used it a few times")),
VCF_intermediate = length(which(`Version Control Familiarity`=="Intermediate user")),
R_never = length(which(`R Familiarity`=="Never used it")),
R_few = length(which(`R Familiarity`=="Have used it a few times")),
R_intermediate = length(which(`R Familiarity`=="Intermediate user"))
)
chart_summary[Freshman,windows]
chart_summary(Freshman,windows)
View(chart_summary)
df$`Operating System`[`Class Standing`=="Freshman"]
df <- chart_data %>% group_by(`Class Standing`) %>%
summarise(
windows = length(which(`Operating System`=="Windows")),
mac = length(which(`Operating System`=="Mac")),
linux = length(which(`Operating System`=="Linux")),
other = length(which(`Operating System`=="Other")),
VCF_never = length(which(`Version Control Familiarity`=="Never used it")),
VCF_few = length(which(`Version Control Familiarity`=="Have used it a few times")),
VCF_intermediate = length(which(`Version Control Familiarity`=="Intermediate user")),
R_never = length(which(`R Familiarity`=="Never used it")),
R_few = length(which(`R Familiarity`=="Have used it a few times")),
R_intermediate = length(which(`R Familiarity`=="Intermediate user"))
)
df$`Operating System`[`Class Standing`=="Freshman"]
View(df)
colnames(df)
df$`Operating System`[df$`Class Standing`=="Freshman"]
row.names(df) <- df$`Class Standing`
df[Freshman,Windows]
df[Freshman,windows]
df[windows,Freshman]
df[Freshman,]
df["Freshman","windows"]
df
df[Freshman,"windows"]
df["Freshman","windows"]
df[1,"windows"]
df <- chart_data %>% group_by(`Class Standing`) %>%
summarise(
windows = length(which(`Operating System`=="Windows")),
mac = length(which(`Operating System`=="Mac")),
linux = length(which(`Operating System`=="Linux")),
other = length(which(`Operating System`=="Other"))
) %>%
mutate(order = c(1,3,4,2))
df <- chart_data %>% group_by(`Class Standing`) %>%
summarise(
windows = length(which(`Operating System`=="Windows")),
mac = length(which(`Operating System`=="Mac")),
linux = length(which(`Operating System`=="Linux")),
other = length(which(`Operating System`=="Other"))
) %>%
mutate(order = c(1,3,4,2)) %>%
arrange(order)
plot <- plot_ly(
x = df$`Class Standing`,
y = df$windows,
name = "Windows"
) %>%
add_trace(
x = df$`Class Standing`,
y = df$mac,
name = "Max"
) %>%
add_trace(
x = df$`Class Standing`,
y = df$linux,
name = "Linux"
) %>%
add_trace(
x = df$`Class Standing`,
y = df$other,
name = "Other"
)
plot
View(plot)
plot <- plot_ly(
x = df$`Class Standing`,
y = df$windows,
name = "Windows",
type = "bar"
) %>%
add_trace(
x = df$`Class Standing`,
y = df$mac,
name = "Max"
) %>%
add_trace(
x = df$`Class Standing`,
y = df$linux,
name = "Linux"
) %>%
add_trace(
x = df$`Class Standing`,
y = df$other,
name = "Other"
)
plot
plot <- plot_ly(
x = df$`Class Standing`,
y = df$windows,
name = "Windows",
type = "bar"
) %>% add_trace(
x = df$`Class Standing`,
y = df$mac,
name = "Max"
) %>% add_trace(
x = df$`Class Standing`,
y = df$linux,
name = "Linux"
) %>% add_trace(
x = df$`Class Standing`,
y = df$other,
name = "Other"
) %>% layout(barmode = "stack")
plot
df <- chart_data %>% group_by(`Class Standing`) %>%
summarise(
windows = length(which(`Operating System`=="Windows")),
mac = length(which(`Operating System`=="Mac")),
linux = length(which(`Operating System`=="Linux")),
other = length(which(`Operating System`=="Other")),
VCF_never = length(which(`Version Control Familiarity`=="Never used it")),
VCF_few = length(which(`Version Control Familiarity`=="Have used it a few times")),
VCF_intermediate = length(which(`Version Control Familiarity`=="Intermediate user")),
R_never = length(which(`R Familiarity`=="Never used it")),
R_few = length(which(`R Familiarity`=="Have used it a few times")),
R_intermediate = length(which(`R Familiarity`=="Intermediate user"))
) %>%
mutate(order = c(1,3,4,2)) %>%
arrange(order)
plot1 <- plot_ly(
x = df$`Class Standing`,
y = df$windows,
name = "Windows",
type = "bar"
) %>% add_trace(
x = df$`Class Standing`,
y = df$mac,
name = "Max"
) %>% add_trace(
x = df$`Class Standing`,
y = df$linux,
name = "Linux"
) %>% add_trace(
x = df$`Class Standing`,
y = df$other,
name = "Other"
) %>% layout(barmode = "stack")
plot2 <- plot_ly(
x = df$`Class Standing`,
y = df$R_never,
name = "Not familiar in R",
type = "bar"
) %>% add_trace(
x = df$`Class Standing`,
y = df$R_few,
name = "Somewhat familiar in R"
)
plot1
plot2
plot2 <- plot_ly(
x = df$`Class Standing`,
y = df$R_never,
name = "Not familiar in R",
type = "bar"
) %>% add_trace(
x = df$`Class Standing`,
y = df$R_few,
name = "Somewhat familiar in R"
) %>% layout(barmode = "stack")
plot2
plot1
plot1 <- plot_ly(
x = df$`Class Standing`,
y = df$windows,
name = "Windows",
type = "bar",
xaxis = "Class Standing",
yaxis = "Operating System",
title = "What Operating System Does Each Class Use?"
) %>% add_trace(
x = df$`Class Standing`,
y = df$mac,
name = "Max"
) %>% add_trace(
x = df$`Class Standing`,
y = df$linux,
name = "Linux"
) %>% add_trace(
x = df$`Class Standing`,
y = df$other,
name = "Other"
) %>% layout(barmode = "stack")
plot1
plot1 <- plot_ly(
x = df$`Class Standing`,
y = df$windows,
name = "Windows",
type = "bar"
) %>% add_trace(
x = df$`Class Standing`,
y = df$mac,
name = "Max"
) %>% add_trace(
x = df$`Class Standing`,
y = df$linux,
name = "Linux"
) %>% add_trace(
x = df$`Class Standing`,
y = df$other,
name = "Other"
) %>% layout(barmode = "stack",
xaxis = list(title = "Class Standing"),
yaxis = list(title = "Operating System"),
title = "What Operating System Does Each Class Use?")
plot1
View(data_)
chart_1(data_)
chart_1 <- function(data) {
chart_data <- data %>% select(What.is.your.current.class.standing.,
What.operating.system.do.you.typically.use.)
chart_data <- chart_data %>% rename("Class Standing"              = What.is.your.current.class.standing.,
"Operating System"            = What.operating.system.do.you.typically.use.)
levels(chart_data$`Operating System`)[levels(chart_data$`Operating System`)
=="Other: Windows at home, Linux (Ubuntu) at work"] <- "Other"
df <- chart_data %>% group_by(`Class Standing`) %>%
summarise(
windows = length(which(`Operating System`=="Windows")),
mac = length(which(`Operating System`=="Mac")),
linux = length(which(`Operating System`=="Linux")),
other = length(which(`Operating System`=="Other"))
) %>%
mutate(order = c(1,3,4,2)) %>%
arrange(order)
plot_ly(
x = df$`Class Standing`,
y = df$windows,
name = "Windows",
type = "bar"
) %>% add_trace(
x = df$`Class Standing`,
y = df$mac,
name = "Max"
) %>% add_trace(
x = df$`Class Standing`,
y = df$linux,
name = "Linux"
) %>% add_trace(
x = df$`Class Standing`,
y = df$other,
name = "Other"
) %>% layout(barmode = "stack",
xaxis = list(title = "Class Standing"),
yaxis = list(title = "Number of Students"),
title = "What Operating System Does Each Class Use?")
}
chart_1(data_)
View(chart_data)
library(shiny)
install.package('rvest')
install.package('rvest')
install.packages('rvest')
library(rvest)
install.packages('wordcloud')
library(wordcloud)
install.packages('tm')
library(tm)
shiny::runApp('info498f/lab-8')
shiny::runApp('info498f/lab-8')
shiny::runApp('info498f/lab-8')
library(shiny)
library(rvest)
library(wordcloud)
library(tm)
url <- "https://www.reddit.com/r/nfl/comments/46vray/tom_brady_is_currently_7_years_older_than_the/"
reddit_html <- read_html(url)
comments <- html_nodes(reddit_html, ".md p")
comments <- html_nodes(reddit_html, ".md p") %>%  html_text()
comments
shiny::runApp('info498f/lab-8')
shiny::runApp('info498f/lab-8')
shiny::runApp('info498f/lab-8')
shiny::runApp('info498f/lab-8')
shiny::runApp('info498f/lab-8')
shiny::runApp('info498f/lab-8')
shiny::runApp('info498f/lab-8')
shiny::runApp('info498f/lecture-16-exercises')
shiny::runApp('info498f/a8-building-applications-')
shiny::runApp('info498f/a8-building-applications-')
shiny::runApp('info498f/a8-building-applications-')
shiny::runApp('info498f/a8-building-applications-')
shiny::runApp('info498f/a8-building-applications-')
shiny::runApp('info498f/a8-building-applications-')
shiny::runApp('info498f/a8-building-applications-')
shiny::runApp('info498f/a8-building-applications-')
shiny::runApp('info498f/a8-building-applications-')
shiny::runApp('info498f/a8-building-applications-')
shiny::runApp('info498f/a8-building-applications-')
shiny::runApp('info498f/a8-building-applications-')
shiny::runApp('info498f/a8-building-applications-')
query <- 'https://en.wikipedia.org/w/api.php?action=query$format=json'
data <- fromJSON(query)
library(jsonlite)
data <- fromJSON(query)
query <- 'https://en.wikipedia.org/w/api.php?action=query'
data <- fromJSON(query)
shiny::runApp('info498f/a8-building-applications-')
shiny::runApp('info498f/a8-building-applications-')
install.packages('devtools')
devtools::install_github('rstudio/rsconnect')
rsconnect::setAccountInfo(name='jtpraino', token='0ADF4A4047CEA2A985AC10BA4260D035', secret='FFH16Q8nRD6ERAWEgW10NHNId6Bqb2ab+k1D5WUo')
library(rsconnect)
rsconnect::setAccountInfo(name='jtpraino',
token='0ADF4A4047CEA2A985AC10BA4260D035',
secret='FFH16Q8nRD6ERAWEgW10NHNId6Bqb2ab+k1D5WUo')
shiny::runApp('info498f/a8-building-applications-')
shiny::runApp('info498f/a8-building-applications-')
library(ggplot2)
library(plotly)
library(dplyr)
library(datasets)
temp <- iris
df <- temp %>% select_("Species", trait)
trait <- "Sepal.Length"
df <- temp %>% select_("Species", trait)
View(df)
plot_ly(ggplot::df,
x = Species,
y = trait,
type = 'box')
library(ggplot)
plot_ly(ggplot2::df,
x = Species,
y = trait,
type = 'box')
build_boxplot <- function(data, trait) {
df <- data %>% select_("Species", trait)
setosa <- grab_trait_per_species(df, "setosa", trait)
versicolor <- grab_trait_per_species(df, "versicolor", trait)
virginica <- grab_trait_per_species(df, "virginica", trait)
plot_ly(y = setosa,
type = 'box')
}
grab_trait_per_species <- function(data, species, trait) {
temp <- data %>% filter(Species = species) %>% select_(trait) %>% return()
}
setosa <- grab_trait_per_species(df, "setosa", trait)
grab_trait_per_species <- function(data, species, trait) {
temp <- data %>% filter(Species == species) %>% select_(trait) %>% return()
}
setosa <- grab_trait_per_species(df, "setosa", trait)
View(setosa)
plot_ly(y = setosa,
type = 'box')
plot_ly(y = setosa[[1]],
plot_ly(y = setosa[[1]],
type = 'box')
sdgsdg
plot_ly(y = setosa[[1]],
type = 'box')
plot_ly(y = setosa[[1]],
type = 'box',
boxpoints = 'all')
plot_ly(y = setosa[[1]],
type = 'box',
boxpoints = 'all',
jitter = 0.3)
plot_ly(y = setosa[[1]],
type = 'box',
boxpoints = 'all',
jitter = 0.3,
pointpos = -1.8)
shiny::runApp('info498f/a8-building-applications-')
shiny::runApp('info498f/a8-building-applications-')
shiny::runApp('info498f/a8-building-applications-')
shiny::runApp('info498f/a8-building-applications-')
temp <- iris
df <- temp %>% select_("Species", trait)
library(dplyr)
library(datasets)
temp <- iris
df <- temp %>% select_("Species", trait)
View(df)
data <- iris
species <- 'setosa'
trait_1 <- 'Sepal.Length'
trait_2 <- 'Petal.Width'
df <- data %>% filter(Species == species) %>% select_(trait_1, trait_2)
View(df)
library(ggplot2)
shiny::runApp('info498f/INFO498F_FINAL')
shiny::runApp('info498f/INFO498F_FINAL')
shiny::runApp('info498f/INFO498F_FINAL')
data <- read.csv("data/CoralDiseases.csv", stringsAsFactors = FALSE) %>% filter(!is.na(LAT),!is.na(LON))
getwd()
setwd("C:/Users/Jared/Documents/info498f/info498f_final")
data <- read.csv("data/CoralDiseases.csv", stringsAsFactors = FALSE) %>% filter(!is.na(LAT),!is.na(LON))
library(dplyr)
library(plotly)
data %>% group_by(DISEASE_TYPE) %>% summarise(n = n() %>% filter(n > 30)
d
data <- data %>% group_by(DISEASE_TYPE) %>% summarise(n = n()) %>% filter(n > 30)
View(data)
df <- data %>% filter(DISEASE_TYPE == "Black-band Disease")
View(df)
data <- read.csv("data/CoralDiseases.csv", stringsAsFactors = FALSE) %>% filter(!is.na(LAT),!is.na(LON))
df <- data %>% filter(YEAR == year, DISEASE_TYPE == disease_type)
df <- data %>% filter(DISEASE_TYPE == disease_type)
> df <- data %>% filter(DISEASE_TYPE == "Black-band Disease")
View(data)
df <- filter(data, DISEASE_TYPE == "Black-band Disease")
View(df)
plot_ly(x = df[[1]],
type = "histogram"
)
) %>% layout(
title = paste("Title"),
yaxis = list(title = paste("Number of Flowers")),
xaxis = list(title = paste("Measurement of","(cm)"))
df <- data %>% filter(DISEASE_TYPE == "Black-band Disease") %>% select(YEAR)
plot_ly(x = df[[1]],
type = "histogram"
)
) %>% layout(
title = paste("Title"),
yaxis = list(title = paste("Number of Flowers")),
xaxis = list(title = paste("Measurement of","(cm)"))
test <- data %>% group_by(DISEASE_TYPE) %>% summarise(n = n()) %>% filter(n > 30)
View(test)
# Isolate data relating to passed specie and trait variables
df <- data %>% filter(DISEASE_TYPE == "White-band disease") %>% select(YEAR)
# Create histogram
# Data for the trait is found in the first column of the dataframe
plot_ly(x = df[[1]],
type = "histogram"
)
<<<<<<< 879caeb142c386e606a77827ffd34b5f8035c90a
) %>% layout(
title = paste("Title"),
yaxis = list(title = paste("Number of Flowers")),
xaxis = list(title = paste("Measurement of","(cm)"))
df <- data %>% filter(DISEASE_TYPE == "White plague") %>% select(YEAR)
# Create histogram
# Data for the trait is found in the first column of the dataframe
plot_ly(x = df[[1]],
type = "histogram"
)
) %>% layout(
title = paste("Title"),
yaxis = list(title = paste("Number of Flowers")),
xaxis = list(title = paste("Measurement of","(cm)"))
df <- data %>% filter(DISEASE_TYPE == "Black-band Disease") %>% select(YEAR)
# Create histogram
# Data for the trait is found in the first column of the dataframe
plot_ly(x = df[[1]],
type = "histogram"
) %>% layout(
title = paste("Coral Reefs Affected by Black-Band Disease"),
yaxis = list(title = paste("Reefs Infected")),
xaxis = list(title = paste("Year"))
fgdfgd
df <- data %>% filter(DISEASE_TYPE == "Black-band Disease") %>% select(YEAR)
# Create histogram
# Data for the trait is found in the first column of the dataframe
plot_ly(x = df[[1]],
type = "histogram"
) %>% layout(
title = paste("Coral Reefs Affected by Black-Band Disease"),
yaxis = list(title = paste("Reefs Infected")),
xaxis = list(title = paste("Year")))
temp <- iris
<<<<<<< 210ed7b37dfd5d59b5951eff4ba79af0a94f8765
=======
create_text <- function(value) {
if(value == 'No daat' || value == 'no data' || value == 'No data' || value == 'unknown' || value == '') {
return('Unknown Percentage Affected')
} else {
return(paste0(value,"% Affected"))
}
}
plot_ly(
df, lat = LAT, lon = LON,
text = paste0(df$COUNTRY,": ",lapply(df$PERCENTAGE_INCIDENCE,create_text())),
type = "scattergeo",  color = DISEASE_REMARKS, mode = "markers",  opacity = 0.8) %>%
layout(title=paste("Prevalence of the", disease_type, "disease during",year), geo = g)
plot_ly(
df, lat = LAT, lon = LON,
text = paste0(df$COUNTRY,": ",lapply(df$PERCENTAGE_INCIDENCE,create_text),
type = "scattergeo",  color = DISEASE_REMARKS, mode = "markers",  opacity = 0.8) %>%
layout(title=paste("Prevalence of the", disease_type, "disease during",year), geo = g)
d
# Function used to generate the text value to describe each data point on the map
create_text <- function(value) {
if(value == 'No daat' || value == 'no data' || value == 'No data' || value == 'unknown' || value == '') {
return('Unknown Percentage Affected')
} else {
return(paste0(value,"% Affected"))
}
}
plot_ly(
sdf
sdgsdg)
plot_ly(
df, lat = LAT, lon = LON,
text = paste0(df$COUNTRY,": ",lapply(x = df$PERCENTAGE_INCIDENCE, FUN = create_text)),
type = "scattergeo",  color = DISEASE_REMARKS, mode = "markers",  opacity = 0.8) %>%
layout(title=paste("Prevalence of the", disease_type, "disease during",year), geo = g)
library(base)
plot_ly(
df, lat = LAT, lon = LON,
text = paste0(df$COUNTRY,": ",lapply(x = df$PERCENTAGE_INCIDENCE, FUN = create_text)),
type = "scattergeo",  color = DISEASE_REMARKS, mode = "markers",  opacity = 0.8) %>%
layout(title=paste("Prevalence of the", disease_type, "disease during",year), geo = g)
create_text <- function(value) {
if(value == 'No daat' || value == 'no data' || value == 'No data' || value == 'unknown' || value == '') {
return('Unknown Percentage Affected')
} else {
return(paste0(value,"% Affected"))
}
}
plot_ly(
df, lat = LAT, lon = LON,
text = paste0(df$COUNTRY,": ",create_text(df$PERCENTAGE_INCIDENCE)),
type = "scattergeo",  color = DISEASE_REMARKS, mode = "markers",  opacity = 0.8) %>%
layout(title=paste("Prevalence of the", disease_type, "disease during",year), geo = g)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
View(iris)
test <- select(iris, name(iris) == "Sepal.Length")
test <- select(iris, names(iris) == "Sepal.Length")
test <- select(iris, names(iris)=='Sepal.Width')
test <- filter(iris, names(iris)=='Sepal.Width')
ftest <- filter(iris, names(iris)=='Sepal.Width')
ftest <- filter(iris, 'Sepal.Width'=='Sepal.Width')
View(ftest)
xlol <- "Sepal.Width"
ylol <- "Sepal.Length"
ftest <- filter(iris, xlol, ylol)
xlol <- Sepal.Width
xlol <- "Sepal.Width"
ftest <- filter(iris, xlol, ylol)
ftest <- select(iris, colnames==xlol)
ftest <- select(iris, colnames(iris)==xlol)
ftest <- filter(iris, colnames(iris)==xlol)
shiny::runApp()
shiny::runApp()
shiny::runApp()
mpa
shiny::runApp()
shiny::runApp()
region <- "Asia"
reservetype <- "Other area"
mpa$hover <- paste(mpa$NAME, "<br>", "Reserve Type:", mpa$TYPE, "<br>", "Year Established:", mpa$YEAR_ESTABLISH)
mpa <- read.csv('data/MarineProtectedAreas.csv', stringsAsFactors = FALSE)
mpa <- filter(mpa, !is.na(LAT), !is.na(LON))
mpa$hover <- paste(mpa$NAME, "<br>", "Reserve Type:", mpa$TYPE, "<br>", "Year Established:", mpa$YEAR_ESTABLISH)
if (region == 'All' && reservetype == 'All') {
df <- mpa
} else if (reservetype == 'All') {
df <- filter(mpa, REGION == region)
} else if (region == 'All') {
df <- filter(mpa, TYPE == reservetype)
} else {
df <- filter(mpa, REGION == region, TYPE == reservetype)
}
View(df)
g <- list(
showland = TRUE,
landcolor = toRGB("gray85"),
subunitwidth = .5,
countrywidth = .5,
subunitcolor = toRGB("gray85"),
countrycolor = toRGB("gray85")
)
!nrow(df)
shiny::runApp()
43.5-39.8
2012-1970
3.7/42
(3.7/42)*100
shiny::runApp()
>>>>>>> rdata rhist
=======
shiny::runApp()
shiny::runApp()
View(data)
View(data)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
>>>>>>> added about_us.md
