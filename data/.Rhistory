type = "scattergeo",  color = DISEASE_REMARKS, mode = "markers",  opacity = 0.8) %>%
layout(title=paste("Prevalence of the", disease_type, "disease during",year), geo = g)
create_text <- function(value){
if(value == "No daat" || value == "no data" || value == "No data" || value == "unknown") {
text <- 'Unknown Percentage Affected' %>% return()
} else {
text <- paste0(value,"% Affected") %>% return()
}
}
# Interactive map
plot_ly(
df, lat = LAT, lon = LON,
text = paste0(df$COUNTRY,": ",create_text(df$PERCENTAGE_INCIDENCE)),
type = "scattergeo",  color = DISEASE_REMARKS, mode = "markers",  opacity = 0.8) %>%
layout(title=paste("Prevalence of the", disease_type, "disease during",year), geo = g)
create_text <- function(value){
if(value == "No daat" || value == "no data" || value == "No data" || value == "unknown") {
text <- 'Unknown Percentage Affected' %>% return()
} else {
text <- paste0(value,"% Affected") %>% return()
}
}
# Function used to generate the text value to describe each data point on the map
create_text <- function(value){
if(value == "No daat" || value == "no data" || value == "No data" || value == "unknown") {
text <- 'Unknown Percentage Affected' %>% return()
} else {
text <- paste0(value,"% Affected") %>% return()
}
}
plot_ly(
df, lat = LAT, lon = LON,
text = paste0(df$COUNTRY,": ",create_text(df$PERCENTAGE_INCIDENCE)),
type = "scattergeo",  color = DISEASE_REMARKS, mode = "markers",  opacity = 0.8) %>%
layout(title=paste("Prevalence of the", disease_type, "disease during",year), geo = g)
create_text <- function(value){
if(value == "No daat" || value == "no data" || value == "No data") {
text <- 'Unknown Percentage Affected' %>% return()
} else {
text <- paste0(value,"% Affected") %>% return()
}
}
plot_ly(
df, lat = LAT, lon = LON,
text = paste0(df$COUNTRY,": ",create_text(df$PERCENTAGE_INCIDENCE)),
type = "scattergeo",  color = DISEASE_REMARKS, mode = "markers",  opacity = 0.8) %>%
layout(title=paste("Prevalence of the", disease_type, "disease during",year), geo = g)
disease_map <- function(year, disease_type) {
# Allows the user to pick between analyzing all disease or focusing on a particular disease
if(diseases_type == 'All'){
df <- data %>% filter(YEAR == year)
} else {
df <- data %>% filter(YEAR == year, DISEASE_TYPE == disease_type)
}
# Prepares plotly to create a map interface
g <- list(
showland = TRUE,
landcolor = toRGB("gray95"),
subunitcolor = toRGB("gray85"),
countrycolor = toRGB("gray85"),
countrywidth = 0.5,
subunitwidth = 0.5
)
# Interactive map
plot_ly(
df, lat = LAT, lon = LON,
text = paste0(df$COUNTRY,": ",create_text(df$PERCENTAGE_INCIDENCE)),
type = "scattergeo",  color = DISEASE_REMARKS, mode = "markers",  opacity = 0.8) %>%
layout(title=paste("Prevalence of the", disease_type, "disease during",year), geo = g)
}
# Function used to generate the text value to describe each data point on the map
create_text <- function(value){
if(value == "No daat" || value == "no data" || value == "No data") {
text <- 'Unknown Percentage Affected' %>% return()
} else {
text <- paste0(value,"% Affected") %>% return()
}
}
data <- disease
data <- read.csv("data/CoralDiseases.csv", stringsAsFactors = FALSE)
data <- disease
disease_map <- function(year, disease_type) {
# Allows the user to pick between analyzing all disease or focusing on a particular disease
if(diseases_type == 'All'){
df <- data %>% filter(YEAR == year)
} else {
df <- data %>% filter(YEAR == year, DISEASE_TYPE == disease_type)
}
# Prepares plotly to create a map interface
g <- list(
showland = TRUE,
landcolor = toRGB("gray95"),
subunitcolor = toRGB("gray85"),
countrycolor = toRGB("gray85"),
countrywidth = 0.5,
subunitwidth = 0.5
)
# Interactive map
plot_ly(
df, lat = LAT, lon = LON,
text = paste0(df$COUNTRY,": ",create_text(df$PERCENTAGE_INCIDENCE)),
type = "scattergeo",  color = DISEASE_REMARKS, mode = "markers",  opacity = 0.8) %>%
layout(title=paste("Prevalence of the", disease_type, "disease during",year), geo = g)
}
# Function used to generate the text value to describe each data point on the map
create_text <- function(value){
if(value == "No daat" || value == "no data" || value == "No data") {
text <- 'Unknown Percentage Affected' %>% return()
} else {
text <- paste0(value,"% Affected") %>% return()
}
}
plot_ly(
df, lat = LAT, lon = LON,
text = paste0(df$COUNTRY,": ",create_text(df$PERCENTAGE_INCIDENCE)),
type = "scattergeo",  color = DISEASE_REMARKS, mode = "markers",  opacity = 0.8) %>%
layout(title=paste("Prevalence of the", disease_type, "disease during",year), geo = g)
create_text <- function(value){
if(value == 'No daat' || value == 'no data' || value == 'No data' || value == 'unknown' || value == '') {
return('Unknown Percentage Affected')
} else {
return(paste0(value,"% Affected"))
}
}
create_text <- function(value){
if(value == 'No daat' || value == 'no data' || value == 'No data' || value == 'unknown' || value == '') {
return('Unknown Percentage Affected')
} else {
return(paste0(value,"% Affected"))
}
}
plot_ly(
df, lat = LAT, lon = LON,
text = paste0(df$COUNTRY,": ",create_text(df$PERCENTAGE_INCIDENCE)),
type = "scattergeo",  color = DISEASE_REMARKS, mode = "markers",  opacity = 0.8) %>%
layout(title=paste("Prevalence of the", disease_type, "disease during",year), geo = g)
create_text <- function(value) {
if(value == 'No daat' || value == 'no data' || value == 'No data' || value == 'unknown' || value == '') {
return('Unknown Percentage Affected')
} else {
return(paste0(value,"% Affected"))
}
}
plot_ly(
df, lat = LAT, lon = LON,
text = paste0(df$COUNTRY,": ",create_text(df$PERCENTAGE_INCIDENCE)),
type = "scattergeo",  color = DISEASE_REMARKS, mode = "markers",  opacity = 0.8) %>%
layout(title=paste("Prevalence of the", disease_type, "disease during",year), geo = g)
create_text <- function(value) {
if(value == 'No daat' || value == 'no data') {
return('Unknown Percentage Affected')
} else {
return(paste0(value,"% Affected"))
}
}
# Interactive map
plot_ly(
df, lat = LAT, lon = LON,
text = paste0(df$COUNTRY,": ",create_text(df$PERCENTAGE_INCIDENCE)),
type = "scattergeo",  color = DISEASE_REMARKS, mode = "markers",  opacity = 0.8) %>%
layout(title=paste("Prevalence of the", disease_type, "disease during",year), geo = g)
value == 'No data'
library(knitr)
library(dplyr)
library(plotly)
# Dataset containing all data on diseases affecting coral reefs from 1970 to 2010
data <- read.csv("data/CoralDiseases.csv", stringsAsFactors = FALSE)
# Function used to generate an interactive map displayin the impact of disease spread in coral reefs.
# Information on severity and location is provided for diseases affecting the variables determining
# specific disease and particular year.
disease_map <- function(year, disease_type) {
# Allows the user to pick between analyzing all disease or focusing on a particular disease
if(diseases_type == 'All'){
df <- data %>% filter(YEAR == year)
} else {
df <- data %>% filter(YEAR == year, DISEASE_TYPE == disease_type)
}
# Prepares plotly to create a map interface
g <- list(
showland = TRUE,
landcolor = toRGB("gray95"),
subunitcolor = toRGB("gray85"),
countrycolor = toRGB("gray85"),
countrywidth = 0.5,
subunitwidth = 0.5
)
# Interactive map
plot_ly(
df, lat = LAT, lon = LON,
text = paste0(df$COUNTRY,": ",create_text(df$PERCENTAGE_INCIDENCE)),
type = "scattergeo",  color = DISEASE_REMARKS, mode = "markers",  opacity = 0.8) %>%
layout(title=paste("Prevalence of the", disease_type, "disease during",year), geo = g)
}
# Function used to generate the text value to describe each data point on the map
create_text <- function(value) {
if(value == 'No daat' || value == 'no data' || value == 'No data' || value == 'unknown' || value == '') {
return('Unknown Percentage Affected')
} else {
return(paste0(value,"% Affected"))
}
}
year <- '2000'
disease_type <- 'All'
g <- list(
showland = TRUE,
landcolor = toRGB("gray95"),
subunitcolor = toRGB("gray85"),
countrycolor = toRGB("gray85"),
countrywidth = 0.5,
subunitwidth = 0.5
)
plot_ly(
df, lat = LAT, lon = LON,
text = paste0(df$COUNTRY,": ",create_text(df$PERCENTAGE_INCIDENCE)),
type = "scattergeo",  color = DISEASE_REMARKS, mode = "markers",  opacity = 0.8) %>%
layout(title=paste("Prevalence of the", disease_type, "disease during",year), geo = g)
if(diseases_type == 'All'){
df <- data %>% filter(YEAR == year)
} else {
df <- data %>% filter(YEAR == year, DISEASE_TYPE == disease_type)
}
if(disease_type == 'All'){
df <- data %>% filter(YEAR == year)
} else {
df <- data %>% filter(YEAR == year, DISEASE_TYPE == disease_type)
}
plot_ly(
df, lat = LAT, lon = LON,
text = paste0(df$COUNTRY,": ",create_text(df$PERCENTAGE_INCIDENCE)),
type = "scattergeo",  color = DISEASE_REMARKS, mode = "markers",  opacity = 0.8) %>%
layout(title=paste("Prevalence of the", disease_type, "disease during",year), geo = g)
vic <- df$PERCENTAGE_INCIDENCE
vic2 <- create_text(vic)
vic2
vic3 <- vic[4]
vic3
is.factor(vic3)
typeof(vic3)
value = vic3
if(value == 'No daat' || value == 'no data' || value == 'No data' || value == 'unknown' || value == '') {
return('Unknown Percentage Affected')
} else {
return(paste0(value,"% Affected"))
}
if(value == 'No daat' || value == 'no data' || value == 'No data' || value == 'unknown' || value == '') {
text <- 'Unknown Percentage Affected'
} else {
text <- paste0(value,"% Affected")
}
text_column <- df$PERCENTAGE_INCIDENCE
text_column <- df$PERCENTAGE_INCIDENCE
text_points <- create_text(text_column)
text_points
create_text(text_column[4])
create_text <- function(value) {
if(value == 'No daat' || value == 'no data' || value == 'No data' || value == 'unknown' || value == '') {
return(paste0(value,"% Affected"))
} else {
return('Unknown Percentage Affected')
}
}
text_column <- df$PERCENTAGE_INCIDENCE
text_points <- create_text(text_column)
text_points
text_points <- create_text(text_column)
create_text <- function(value) {
if(value == 'No daat' || value == 'no data' || value == 'No data' || value == 'unknown' || value == '') {
return(paste0(value,"% Affected"))
} else {
return(paste('Unknown Percentage Affected'))
}
}
text_column <- df$PERCENTAGE_INCIDENCE
text_points <- create_text(text_column)
text_column
create_text(text_column)
create_text <- function(value) {
if(value == 'No daat' || value == 'no data' || value == 'No data' || value == 'unknown' || value == '') {
return('Unknown Percentage Affected')
} else {
return('Unknown Percentage Affected')
}
}
create_text <- function(value) {
if(value == 'No daat' || value == 'no data' || value == 'No data' || value == 'unknown' || value == '') {
return('Unknown Percentage Affected')
} else {
return('Unknown Percentage Affected')
}
}
plot_ly(
df, lat = LAT, lon = LON,
text = paste0(df$COUNTRY,": ",text_points),
type = "scattergeo",  color = DISEASE_REMARKS, mode = "markers",  opacity = 0.8) %>%
layout(title=paste("Prevalence of the", disease_type, "disease during",year), geo = g)
text_column <- df$PERCENTAGE_INCIDENCE
text_points <- create_text(text_column)
text_column <- df$PERCENTAGE_INCIDENCE
text_column <- create_text(text_column)
text_column <- df$PERCENTAGE_INCIDENCE
# Function used to generate the text value to describe each data point on the map
create_text <- function(value) {
if(value == 'No daat' || value == 'no data' || value == 'No data' || value == 'unknown' || value == '') {
return('Unknown Percentage Affected')
} else {
return(paste0(value,"% Affected"))
}
}
plot_ly(
df, lat = LAT, lon = LON,
text = paste0(df$COUNTRY,": ",lapply(df$PERCENTAGE_INCIDENCE,create_text())),
type = "scattergeo",  color = DISEASE_REMARKS, mode = "markers",  opacity = 0.8) %>%
layout(title=paste("Prevalence of the", disease_type, "disease during",year), geo = g)
data <- read.csv("data/CoralDiseases.csv", stringsAsFactors = FALSE)
year <- '2000'
disease_type <- 'All'
# Allows the user to pick between analyzing all disease or focusing on a particular disease
if(disease_type == 'All'){
df <- data %>% filter(YEAR == year)
} else {
df <- data %>% filter(YEAR == year, DISEASE_TYPE == disease_type)
}
g <- list(
showland = TRUE,
landcolor = toRGB("gray95"),
subunitcolor = toRGB("gray85"),
countrycolor = toRGB("gray85"),
countrywidth = 0.5,
subunitwidth = 0.5
)
create_text <- function(value) {
if(value == 'No daat' || value == 'no data' || value == 'No data' || value == 'unknown' || value == '') {
return('Unknown Percentage Affected')
} else {
return(paste0(value,"% Affected"))
}
}
plot_ly(
df, lat = LAT, lon = LON,
text = paste0(df$COUNTRY,": ",lapply(df$PERCENTAGE_INCIDENCE,create_text())),
type = "scattergeo",  color = DISEASE_REMARKS, mode = "markers",  opacity = 0.8) %>%
layout(title=paste("Prevalence of the", disease_type, "disease during",year), geo = g)
plot_ly(
df, lat = LAT, lon = LON,
text = paste0(df$COUNTRY,": ",lapply(df$PERCENTAGE_INCIDENCE,create_text),
type = "scattergeo",  color = DISEASE_REMARKS, mode = "markers",  opacity = 0.8) %>%
layout(title=paste("Prevalence of the", disease_type, "disease during",year), geo = g)
d
# Function used to generate the text value to describe each data point on the map
create_text <- function(value) {
if(value == 'No daat' || value == 'no data' || value == 'No data' || value == 'unknown' || value == '') {
return('Unknown Percentage Affected')
} else {
return(paste0(value,"% Affected"))
}
}
plot_ly(
sdf
sdgsdg)
plot_ly(
df, lat = LAT, lon = LON,
text = paste0(df$COUNTRY,": ",lapply(x = df$PERCENTAGE_INCIDENCE, FUN = create_text)),
type = "scattergeo",  color = DISEASE_REMARKS, mode = "markers",  opacity = 0.8) %>%
layout(title=paste("Prevalence of the", disease_type, "disease during",year), geo = g)
library(base)
plot_ly(
df, lat = LAT, lon = LON,
text = paste0(df$COUNTRY,": ",lapply(x = df$PERCENTAGE_INCIDENCE, FUN = create_text)),
type = "scattergeo",  color = DISEASE_REMARKS, mode = "markers",  opacity = 0.8) %>%
layout(title=paste("Prevalence of the", disease_type, "disease during",year), geo = g)
create_text <- function(value) {
if(value == 'No daat' || value == 'no data' || value == 'No data' || value == 'unknown' || value == '') {
return('Unknown Percentage Affected')
} else {
return(paste0(value,"% Affected"))
}
}
plot_ly(
df, lat = LAT, lon = LON,
text = paste0(df$COUNTRY,": ",create_text(df$PERCENTAGE_INCIDENCE)),
type = "scattergeo",  color = DISEASE_REMARKS, mode = "markers",  opacity = 0.8) %>%
layout(title=paste("Prevalence of the", disease_type, "disease during",year), geo = g)
## Plotly graph for Marine Protected Areas dataset
g <- list(
showland = TRUE,
## Plotly graph for Marine Protected Areas dataset
library(dplyr)
library(plotly)
setwd('C:/Users/Gina/documents/info498f/info498f_final/data')
mpa <- read.csv('MarineProtectedAreas.csv', stringsAsFactors = FALSE)
# Function that will take in the name of a region and type of marine reserve and represent
# which regions have that type of reserve. This will also allow the user to see the size of
# the reef protected area
marine_protected <- function(region, reservetype) {
mpa$hover <- paste(mpa$NAME, "<br>", "Reserve Type", mpa$TYPE, "<br>", "Year Established", mpa$YEAR_ESTABLISHED)
if (region == 'All' && reservetype == 'All') {
df <- select(mpa, REGION, TYPE)
} else if (reservetype == 'All') {
df <- filter(mpa, REGION == region)
} else if (region == 'All') {
df <- filter(mpa, TYPE == reservetype)
} else {
df <- filter(mpa, REGION == region)
df <- filter(df, TYPE == reservetype)
}
g <- list(
showland = TRUE,
landcolor = toRGB("gray85"),
subunitwidth = .5,
countrywidth = .5,
subunitcolor = toRGB("gray85"),
countrycolor = toRGB("gray85")
)
plot_ly(mpa,
lon = LON, lat = LAT,
text = hover,
mode = 'markers',
opacity = .8,
size = df$REEF_AREA_SIZE / 1000,
color = df$REGION, type = 'scattergeo') %>%
layout(title=paste('Marine Protected Areas in', region), geo = g) %>%
return()
}
marine_protected("Africa", "National Reserve")
## Plotly graph for Marine Protected Areas dataset
library(dplyr)
library(plotly)
setwd('C:/Users/Gina/documents/info498f/info498f_final/data')
mpa <- read.csv('MarineProtectedAreas.csv', stringsAsFactors = FALSE)
# Function that will take in the name of a region and type of marine reserve and represent
# which regions have that type of reserve. This will also allow the user to see the size of
# the reef protected area
marine_protected <- function(region, reservetype) {
mpa$hover <- paste(mpa$NAME, "<br>", "Reserve Type", mpa$TYPE, "<br>", "Year Established", mpa$YEAR_ESTABLISHED)
if (region == 'All' && reservetype == 'All') {
df <- select(mpa, REGION, TYPE)
} else if (reservetype == 'All') {
df <- filter(mpa, REGION == region)
} else if (region == 'All') {
df <- filter(mpa, TYPE == reservetype)
} else {
df <- filter(mpa, REGION == region)
df <- filter(df, TYPE == reservetype)
}
g <- list(
showland = TRUE,
landcolor = toRGB("gray85"),
subunitwidth = .5,
countrywidth = .5,
subunitcolor = toRGB("gray85"),
countrycolor = toRGB("gray85")
)
plot_ly(mpa,
lon = LON, lat = LAT,
text = hover,
mode = 'markers',
opacity = .8,
size = df$REEF_AREA_SIZE / 1000,
color = df$REGION, type = 'scattergeo') %>%
layout(title=paste('Marine Protected Areas in', region), geo = g) %>%
return()
}
marine_protected("Africa", "Natural Reserve")
distinct(select(mpa, TYPE))
nrow(filter(mpa, TYPE=="Area de Uso Múltiple"))
nrow(filter(mpa, TYPE=="Area de Protección y Recuperación Natural"))
nrow(filter(mpa, TYPE=="Area de Protecci=n de Flora y Fauna"))
nrow(filter(mpa, TYPE=="Area de Protección de Flora y Fauna"))
nrow(filter(mpa, TYPE=="Parque Natural"))
filter(mpa, TYPE=="Parque Natural")
mpa  %>% group_by(TYPE) %>% summarise(num=n())
test<-mpa  %>% group_by(TYPE) %>% summarise(num=n())
View(test)
filter(test, num > 10)
good <- filter(test, num > 10)
View(good)
typeof(mpa, TYPE)
typeof(mpa, mpa$TYPE)
?typeof
typeof(mpa$TYPE)
mpa <- filter(mpa, !is.na(LAT), !is.na(LON))
test<-mpa  %>% group_by(TYPE) %>% summarise(num=n())
good <- filter(test, num > 10)
good <- filter(test, num > 5)
nrow(good)
good <- filter(test, num > 10)
nrow(good)
View(good)
View(mpa)
godo
good
distinct(select(good, TYPE))
good <- filter(test, num > 15)
nrow(good)
good <- filter(test, num > 20)
nrow(good)
good <- filter(test, num > 25)
nrow(good)
good <- filter(test, num > 30)
nrow(good)
good
good$TYPE
shiny::runApp('~/Documents/info498f/info498f_final')
shiny::runApp('~/Documents/info498f/info498f_final')
shiny::runApp('~/Documents/info498f/info498f_final')
shiny::runApp('~/Documents/info498f/info498f_final')
shiny::runApp('~/Documents/info498f/info498f_final')
shiny::runApp('~/Documents/info498f/info498f_final')
shiny::runApp('~/Documents/info498f/info498f_final')
shiny::runApp('~/Documents/info498f/info498f_final')
shiny::runApp('~/Documents/info498f/info498f_final')
shiny::runApp('~/Documents/info498f/info498f_final')
